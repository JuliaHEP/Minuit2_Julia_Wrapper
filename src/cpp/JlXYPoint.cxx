// this file was auto-generated by wrapit v1.4.0-3-g14eb9a6
#include "Wrapper.h"

#include "jlMinuit2.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<XYPoint> : std::false_type { };
  template<> struct DefaultConstructible<XYPoint> : std::false_type { };
}

// Class generating the wrapper for type XYPoint
// signature to use in the veto file: XYPoint
struct JlXYPoint: public Wrapper {

  JlXYPoint(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type XYPoint (" __HERE__ ")");
    // defined in ./cpp/Minuit2Wrap.h:63:7
    jlcxx::TypeWrapper<XYPoint>  t = jlModule.add_type<XYPoint>("XYPoint");
    jlcxx::stl::apply_stl<XYPoint>(jlModule);
    type_ = std::unique_ptr<jlcxx::TypeWrapper<XYPoint>>(new jlcxx::TypeWrapper<XYPoint>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void XYPoint::XYPoint(double, double) (" __HERE__ ")");
    // defined in ./cpp/Minuit2Wrap.h:65:5
    t.constructor<double, double>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void XYPoint::XYPoint(const XYPoint &) (" __HERE__ ")");
    // defined in ./cpp/Minuit2Wrap.h:67:5
    t.constructor<const XYPoint &>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for double XYPoint::X() (" __HERE__ ")");
    // signature to use in the veto list: double XYPoint::X()
    // defined in ./cpp/Minuit2Wrap.h:68:12
    t.method("X", [](XYPoint const& a)->double { return a.X(); });
    t.method("X", [](XYPoint const* a)->double { return a->X(); });

    DEBUG_MSG("Adding wrapper for double XYPoint::Y() (" __HERE__ ")");
    // signature to use in the veto list: double XYPoint::Y()
    // defined in ./cpp/Minuit2Wrap.h:69:12
    t.method("Y", [](XYPoint const& a)->double { return a.Y(); });
    t.method("Y", [](XYPoint const* a)->double { return a->Y(); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<XYPoint>> type_;
};
std::shared_ptr<Wrapper> newJlXYPoint(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlXYPoint(module));
}
