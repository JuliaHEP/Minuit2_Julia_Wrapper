// this file was auto-generated by wrapit v1.6.0
#include "Wrapper.h"

#include "jlMinuit2.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<ROOT::Minuit2::MinosError> : std::false_type { };
  template<> struct DefaultConstructible<ROOT::Minuit2::MinosError> : std::false_type { };
}

// Class generating the wrapper for type ROOT::Minuit2::MinosError
// signature to use in the veto file: ROOT::Minuit2::MinosError
struct JlROOT_Minuit2_MinosError: public Wrapper {

  JlROOT_Minuit2_MinosError(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type ROOT::Minuit2::MinosError (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/4afa81fd17c8d2616a0895f609579f19a4e4e4b7/include/Minuit2/Minuit2/MinosError.h:25:7
    jlcxx::TypeWrapper<ROOT::Minuit2::MinosError>  t = jlModule.add_type<ROOT::Minuit2::MinosError>("ROOT!Minuit2!MinosError");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<ROOT::Minuit2::MinosError>>(new jlcxx::TypeWrapper<ROOT::Minuit2::MinosError>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes    );


    DEBUG_MSG("Adding wrapper for void ROOT::Minuit2::MinosError::MinosError(unsigned int, double, const ROOT::Minuit2::MnCross &, const ROOT::Minuit2::MnCross &) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/4afa81fd17c8d2616a0895f609579f19a4e4e4b7/include/Minuit2/Minuit2/MinosError.h:30:4
    t.constructor<unsigned int, double, const ROOT::Minuit2::MnCross &, const ROOT::Minuit2::MnCross &>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("par"), jlcxx::arg("value"), jlcxx::arg("low"), jlcxx::arg("up")    );


    DEBUG_MSG("Adding wrapper for void ROOT::Minuit2::MinosError::MinosError(const ROOT::Minuit2::MinosError &) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/4afa81fd17c8d2616a0895f609579f19a4e4e4b7/include/Minuit2/Minuit2/MinosError.h:37:4
    t.constructor<const ROOT::Minuit2::MinosError &>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("err")    );

    DEBUG_MSG("Adding wrapper for ROOT::Minuit2::MinosError & ROOT::Minuit2::MinosError::operator=(const ROOT::Minuit2::MinosError &) (" __HERE__ ")");
    // signature to use in the veto list: ROOT::Minuit2::MinosError & ROOT::Minuit2::MinosError::operator=(const ROOT::Minuit2::MinosError &)
    // defined in /Users/mato/.julia/artifacts/4afa81fd17c8d2616a0895f609579f19a4e4e4b7/include/Minuit2/Minuit2/MinosError.h:42:16
    t.method("assign", [](ROOT::Minuit2::MinosError& a, const ROOT::Minuit2::MinosError & arg0)->ROOT::Minuit2::MinosError & { return a.operator=(arg0); }, jlcxx::arg("this"), jlcxx::arg("arg0"));
    t.method("assign", [](ROOT::Minuit2::MinosError* a, const ROOT::Minuit2::MinosError & arg0)->ROOT::Minuit2::MinosError & { return a->operator=(arg0); }, jlcxx::arg("this"), jlcxx::arg("arg0"));

    DEBUG_MSG("Adding wrapper for ROOT::Minuit2::MinosError & ROOT::Minuit2::MinosError::operator()(const ROOT::Minuit2::MinosError &) (" __HERE__ ")");
    // signature to use in the veto list: ROOT::Minuit2::MinosError & ROOT::Minuit2::MinosError::operator()(const ROOT::Minuit2::MinosError &)
    // defined in /Users/mato/.julia/artifacts/4afa81fd17c8d2616a0895f609579f19a4e4e4b7/include/Minuit2/Minuit2/MinosError.h:44:16
    t.method("paren", [](ROOT::Minuit2::MinosError& a, const ROOT::Minuit2::MinosError & arg0)->ROOT::Minuit2::MinosError & { return a.operator()(arg0); }, jlcxx::arg("this"), jlcxx::arg("err"));
    t.method("paren", [](ROOT::Minuit2::MinosError* a, const ROOT::Minuit2::MinosError & arg0)->ROOT::Minuit2::MinosError & { return a->operator()(arg0); }, jlcxx::arg("this"), jlcxx::arg("err"));

    DEBUG_MSG("Adding wrapper for std::pair<double,double> ROOT::Minuit2::MinosError::operator()() (" __HERE__ ")");
    // signature to use in the veto list: std::pair<double,double> ROOT::Minuit2::MinosError::operator()()
    // defined in /Users/mato/.julia/artifacts/4afa81fd17c8d2616a0895f609579f19a4e4e4b7/include/Minuit2/Minuit2/MinosError.h:53:30
    t.method("paren", [](ROOT::Minuit2::MinosError const& a)->std::pair<double,double> { return a.operator()(); }, jlcxx::arg("this"));
    t.method("paren", [](ROOT::Minuit2::MinosError const* a)->std::pair<double,double> { return a->operator()(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for double ROOT::Minuit2::MinosError::Lower() (" __HERE__ ")");
    // signature to use in the veto list: double ROOT::Minuit2::MinosError::Lower()
    // defined in /Users/mato/.julia/artifacts/4afa81fd17c8d2616a0895f609579f19a4e4e4b7/include/Minuit2/Minuit2/MinosError.h:54:11
    t.method("Lower", [](ROOT::Minuit2::MinosError const& a)->double { return a.Lower(); }, jlcxx::arg("this"));
    t.method("Lower", [](ROOT::Minuit2::MinosError const* a)->double { return a->Lower(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for double ROOT::Minuit2::MinosError::Upper() (" __HERE__ ")");
    // signature to use in the veto list: double ROOT::Minuit2::MinosError::Upper()
    // defined in /Users/mato/.julia/artifacts/4afa81fd17c8d2616a0895f609579f19a4e4e4b7/include/Minuit2/Minuit2/MinosError.h:70:11
    t.method("Upper", [](ROOT::Minuit2::MinosError const& a)->double { return a.Upper(); }, jlcxx::arg("this"));
    t.method("Upper", [](ROOT::Minuit2::MinosError const* a)->double { return a->Upper(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for unsigned int ROOT::Minuit2::MinosError::Parameter() (" __HERE__ ")");
    // signature to use in the veto list: unsigned int ROOT::Minuit2::MinosError::Parameter()
    // defined in /Users/mato/.julia/artifacts/4afa81fd17c8d2616a0895f609579f19a4e4e4b7/include/Minuit2/Minuit2/MinosError.h:85:17
    t.method("Parameter", [](ROOT::Minuit2::MinosError const& a)->unsigned int { return a.Parameter(); }, jlcxx::arg("this"));
    t.method("Parameter", [](ROOT::Minuit2::MinosError const* a)->unsigned int { return a->Parameter(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for const ROOT::Minuit2::MnUserParameterState & ROOT::Minuit2::MinosError::LowerState() (" __HERE__ ")");
    // signature to use in the veto list: const ROOT::Minuit2::MnUserParameterState & ROOT::Minuit2::MinosError::LowerState()
    // defined in /Users/mato/.julia/artifacts/4afa81fd17c8d2616a0895f609579f19a4e4e4b7/include/Minuit2/Minuit2/MinosError.h:86:32
    t.method("LowerState", [](ROOT::Minuit2::MinosError const& a)->const ROOT::Minuit2::MnUserParameterState & { return a.LowerState(); }, jlcxx::arg("this"));
    t.method("LowerState", [](ROOT::Minuit2::MinosError const* a)->const ROOT::Minuit2::MnUserParameterState & { return a->LowerState(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for const ROOT::Minuit2::MnUserParameterState & ROOT::Minuit2::MinosError::UpperState() (" __HERE__ ")");
    // signature to use in the veto list: const ROOT::Minuit2::MnUserParameterState & ROOT::Minuit2::MinosError::UpperState()
    // defined in /Users/mato/.julia/artifacts/4afa81fd17c8d2616a0895f609579f19a4e4e4b7/include/Minuit2/Minuit2/MinosError.h:87:32
    t.method("UpperState", [](ROOT::Minuit2::MinosError const& a)->const ROOT::Minuit2::MnUserParameterState & { return a.UpperState(); }, jlcxx::arg("this"));
    t.method("UpperState", [](ROOT::Minuit2::MinosError const* a)->const ROOT::Minuit2::MnUserParameterState & { return a->UpperState(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for bool ROOT::Minuit2::MinosError::IsValid() (" __HERE__ ")");
    // signature to use in the veto list: bool ROOT::Minuit2::MinosError::IsValid()
    // defined in /Users/mato/.julia/artifacts/4afa81fd17c8d2616a0895f609579f19a4e4e4b7/include/Minuit2/Minuit2/MinosError.h:88:9
    t.method("IsValid", [](ROOT::Minuit2::MinosError const& a)->bool { return a.IsValid(); }, jlcxx::arg("this"));
    t.method("IsValid", [](ROOT::Minuit2::MinosError const* a)->bool { return a->IsValid(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for bool ROOT::Minuit2::MinosError::LowerValid() (" __HERE__ ")");
    // signature to use in the veto list: bool ROOT::Minuit2::MinosError::LowerValid()
    // defined in /Users/mato/.julia/artifacts/4afa81fd17c8d2616a0895f609579f19a4e4e4b7/include/Minuit2/Minuit2/MinosError.h:89:9
    t.method("LowerValid", [](ROOT::Minuit2::MinosError const& a)->bool { return a.LowerValid(); }, jlcxx::arg("this"));
    t.method("LowerValid", [](ROOT::Minuit2::MinosError const* a)->bool { return a->LowerValid(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for bool ROOT::Minuit2::MinosError::UpperValid() (" __HERE__ ")");
    // signature to use in the veto list: bool ROOT::Minuit2::MinosError::UpperValid()
    // defined in /Users/mato/.julia/artifacts/4afa81fd17c8d2616a0895f609579f19a4e4e4b7/include/Minuit2/Minuit2/MinosError.h:90:9
    t.method("UpperValid", [](ROOT::Minuit2::MinosError const& a)->bool { return a.UpperValid(); }, jlcxx::arg("this"));
    t.method("UpperValid", [](ROOT::Minuit2::MinosError const* a)->bool { return a->UpperValid(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for bool ROOT::Minuit2::MinosError::AtLowerLimit() (" __HERE__ ")");
    // signature to use in the veto list: bool ROOT::Minuit2::MinosError::AtLowerLimit()
    // defined in /Users/mato/.julia/artifacts/4afa81fd17c8d2616a0895f609579f19a4e4e4b7/include/Minuit2/Minuit2/MinosError.h:91:9
    t.method("AtLowerLimit", [](ROOT::Minuit2::MinosError const& a)->bool { return a.AtLowerLimit(); }, jlcxx::arg("this"));
    t.method("AtLowerLimit", [](ROOT::Minuit2::MinosError const* a)->bool { return a->AtLowerLimit(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for bool ROOT::Minuit2::MinosError::AtUpperLimit() (" __HERE__ ")");
    // signature to use in the veto list: bool ROOT::Minuit2::MinosError::AtUpperLimit()
    // defined in /Users/mato/.julia/artifacts/4afa81fd17c8d2616a0895f609579f19a4e4e4b7/include/Minuit2/Minuit2/MinosError.h:92:9
    t.method("AtUpperLimit", [](ROOT::Minuit2::MinosError const& a)->bool { return a.AtUpperLimit(); }, jlcxx::arg("this"));
    t.method("AtUpperLimit", [](ROOT::Minuit2::MinosError const* a)->bool { return a->AtUpperLimit(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for bool ROOT::Minuit2::MinosError::AtLowerMaxFcn() (" __HERE__ ")");
    // signature to use in the veto list: bool ROOT::Minuit2::MinosError::AtLowerMaxFcn()
    // defined in /Users/mato/.julia/artifacts/4afa81fd17c8d2616a0895f609579f19a4e4e4b7/include/Minuit2/Minuit2/MinosError.h:93:9
    t.method("AtLowerMaxFcn", [](ROOT::Minuit2::MinosError const& a)->bool { return a.AtLowerMaxFcn(); }, jlcxx::arg("this"));
    t.method("AtLowerMaxFcn", [](ROOT::Minuit2::MinosError const* a)->bool { return a->AtLowerMaxFcn(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for bool ROOT::Minuit2::MinosError::AtUpperMaxFcn() (" __HERE__ ")");
    // signature to use in the veto list: bool ROOT::Minuit2::MinosError::AtUpperMaxFcn()
    // defined in /Users/mato/.julia/artifacts/4afa81fd17c8d2616a0895f609579f19a4e4e4b7/include/Minuit2/Minuit2/MinosError.h:94:9
    t.method("AtUpperMaxFcn", [](ROOT::Minuit2::MinosError const& a)->bool { return a.AtUpperMaxFcn(); }, jlcxx::arg("this"));
    t.method("AtUpperMaxFcn", [](ROOT::Minuit2::MinosError const* a)->bool { return a->AtUpperMaxFcn(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for bool ROOT::Minuit2::MinosError::LowerNewMin() (" __HERE__ ")");
    // signature to use in the veto list: bool ROOT::Minuit2::MinosError::LowerNewMin()
    // defined in /Users/mato/.julia/artifacts/4afa81fd17c8d2616a0895f609579f19a4e4e4b7/include/Minuit2/Minuit2/MinosError.h:95:9
    t.method("LowerNewMin", [](ROOT::Minuit2::MinosError const& a)->bool { return a.LowerNewMin(); }, jlcxx::arg("this"));
    t.method("LowerNewMin", [](ROOT::Minuit2::MinosError const* a)->bool { return a->LowerNewMin(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for bool ROOT::Minuit2::MinosError::UpperNewMin() (" __HERE__ ")");
    // signature to use in the veto list: bool ROOT::Minuit2::MinosError::UpperNewMin()
    // defined in /Users/mato/.julia/artifacts/4afa81fd17c8d2616a0895f609579f19a4e4e4b7/include/Minuit2/Minuit2/MinosError.h:96:9
    t.method("UpperNewMin", [](ROOT::Minuit2::MinosError const& a)->bool { return a.UpperNewMin(); }, jlcxx::arg("this"));
    t.method("UpperNewMin", [](ROOT::Minuit2::MinosError const* a)->bool { return a->UpperNewMin(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for unsigned int ROOT::Minuit2::MinosError::NFcn() (" __HERE__ ")");
    // signature to use in the veto list: unsigned int ROOT::Minuit2::MinosError::NFcn()
    // defined in /Users/mato/.julia/artifacts/4afa81fd17c8d2616a0895f609579f19a4e4e4b7/include/Minuit2/Minuit2/MinosError.h:97:17
    t.method("NFcn", [](ROOT::Minuit2::MinosError const& a)->unsigned int { return a.NFcn(); }, jlcxx::arg("this"));
    t.method("NFcn", [](ROOT::Minuit2::MinosError const* a)->unsigned int { return a->NFcn(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for double ROOT::Minuit2::MinosError::Min() (" __HERE__ ")");
    // signature to use in the veto list: double ROOT::Minuit2::MinosError::Min()
    // defined in /Users/mato/.julia/artifacts/4afa81fd17c8d2616a0895f609579f19a4e4e4b7/include/Minuit2/Minuit2/MinosError.h:99:11
    t.method("Min", [](ROOT::Minuit2::MinosError const& a)->double { return a.Min(); }, jlcxx::arg("this"));
    t.method("Min", [](ROOT::Minuit2::MinosError const* a)->double { return a->Min(); }, jlcxx::arg("this"));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<ROOT::Minuit2::MinosError>> type_;
};
std::shared_ptr<Wrapper> newJlROOT_Minuit2_MinosError(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlROOT_Minuit2_MinosError(module));
}
