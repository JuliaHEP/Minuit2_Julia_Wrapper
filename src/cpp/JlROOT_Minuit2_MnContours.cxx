// this file was auto-generated by wrapit v1.6.0
#include "Wrapper.h"

#include "jlMinuit2.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<ROOT::Minuit2::MnContours> : std::false_type { };
  template<> struct DefaultConstructible<ROOT::Minuit2::MnContours> : std::false_type { };
}

// Class generating the wrapper for type ROOT::Minuit2::MnContours
// signature to use in the veto file: ROOT::Minuit2::MnContours
struct JlROOT_Minuit2_MnContours: public Wrapper {

  JlROOT_Minuit2_MnContours(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type ROOT::Minuit2::MnContours (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/4afa81fd17c8d2616a0895f609579f19a4e4e4b7/include/Minuit2/Minuit2/MnContours.h:35:7
    jlcxx::TypeWrapper<ROOT::Minuit2::MnContours>  t = jlModule.add_type<ROOT::Minuit2::MnContours>("ROOT!Minuit2!MnContours");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<ROOT::Minuit2::MnContours>>(new jlcxx::TypeWrapper<ROOT::Minuit2::MnContours>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void ROOT::Minuit2::MnContours::MnContours(const ROOT::Minuit2::FCNBase &, const ROOT::Minuit2::FunctionMinimum &) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/4afa81fd17c8d2616a0895f609579f19a4e4e4b7/include/Minuit2/Minuit2/MnContours.h:39:4
    t.constructor<const ROOT::Minuit2::FCNBase &, const ROOT::Minuit2::FunctionMinimum &>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("fcn"), jlcxx::arg("min")    );


    DEBUG_MSG("Adding wrapper for void ROOT::Minuit2::MnContours::MnContours(const ROOT::Minuit2::FCNBase &, const ROOT::Minuit2::FunctionMinimum &, unsigned int) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/4afa81fd17c8d2616a0895f609579f19a4e4e4b7/include/Minuit2/Minuit2/MnContours.h:42:4
    t.constructor<const ROOT::Minuit2::FCNBase &, const ROOT::Minuit2::FunctionMinimum &, unsigned int>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("fcn"), jlcxx::arg("min"), jlcxx::arg("stra")    );


    DEBUG_MSG("Adding wrapper for void ROOT::Minuit2::MnContours::MnContours(const ROOT::Minuit2::FCNBase &, const ROOT::Minuit2::FunctionMinimum &, const ROOT::Minuit2::MnStrategy &) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/4afa81fd17c8d2616a0895f609579f19a4e4e4b7/include/Minuit2/Minuit2/MnContours.h:48:4
    t.constructor<const ROOT::Minuit2::FCNBase &, const ROOT::Minuit2::FunctionMinimum &, const ROOT::Minuit2::MnStrategy &>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("fcn"), jlcxx::arg("min"), jlcxx::arg("stra")    );

    DEBUG_MSG("Adding wrapper for const ROOT::Minuit2::MnStrategy & ROOT::Minuit2::MnContours::Strategy() (" __HERE__ ")");
    // signature to use in the veto list: const ROOT::Minuit2::MnStrategy & ROOT::Minuit2::MnContours::Strategy()
    // defined in /Users/mato/.julia/artifacts/4afa81fd17c8d2616a0895f609579f19a4e4e4b7/include/Minuit2/Minuit2/MnContours.h:63:22
    t.method("Strategy", [](ROOT::Minuit2::MnContours const& a)->const ROOT::Minuit2::MnStrategy & { return a.Strategy(); }, jlcxx::arg("this"));
    t.method("Strategy", [](ROOT::Minuit2::MnContours const* a)->const ROOT::Minuit2::MnStrategy & { return a->Strategy(); }, jlcxx::arg("this"));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<ROOT::Minuit2::MnContours>> type_;
};
std::shared_ptr<Wrapper> newJlROOT_Minuit2_MnContours(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlROOT_Minuit2_MnContours(module));
}
