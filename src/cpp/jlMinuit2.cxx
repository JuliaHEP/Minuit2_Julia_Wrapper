// this file was auto-generated by wrapit 5168a24-dirty
#include "jlcxx/jlcxx.hpp"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

#include "jlMinuit2.h"

#include <regex>

#include "dbg_msg.h"
#include "Wrapper.h"

class JlROOT_Minuit2_FCNBase;
class JlROOT_Minuit2_LAVector;
class JlROOT_Minuit2_MinimumParameters;
class JlROOT_Minuit2_FunctionMinimum;
class JlROOT_Minuit2_MinimumState;
class JlROOT_Minuit2_LASymMatrix;
class JlROOT_Minuit2_MnUserParameters;
class JlROOT_Minuit2_MnUserCovariance;
class JlROOT_Minuit2_MnGlobalCorrelationCoeff;
class JlROOT_Minuit2_MnUserParameterState;
class JlROOT_Minuit2_MnMachinePrecision;
class JlROOT_Minuit2_MinosError;
class Jlstd_pair;
class JlROOT_Minuit2_MnPrint;
class JlROOT_Minuit2_MnPrint_Oneline;
class JlROOT_Minuit2_MinimumError;
class JlROOT_Minuit2_FunctionGradient;
class JlROOT_Minuit2_MinuitParameter;
class JlROOT_Minuit2_MnUserTransformation;
class JlROOT_Minuit2_MinimumSeed;
class JlJuliaFcn;
class JlROOT_Minuit2_MnStrategy;
class JlXYPoint;
class JlROOT_Minuit2_MnContours;
class JlROOT_Minuit2_MnApplication;
class JlROOT_Minuit2_ModularFunctionMinimizer;
class JlROOT_Minuit2_MnMigrad;
class JlROOT_Minuit2_MnHesse;
class JlROOT_Minuit2_MnFcn;
class JlROOT_Minuit2_MnMinos;
class JlROOT_Minuit2_MnCross;
class JlROOT_Minuit2_MnSimplex;
class JlROOT_Minuit2_MnCross_CrossParLimit;
class JlROOT_Minuit2_MnCross_CrossFcnLimit;
class JlROOT_Minuit2_MnCross_CrossNewMin;
class JlROOT_Minuit2_MnScan;
class JlGlobal;

std::shared_ptr<Wrapper> newJlROOT_Minuit2_FCNBase(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlROOT_Minuit2_LAVector(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlROOT_Minuit2_MinimumParameters(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlROOT_Minuit2_FunctionMinimum(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlROOT_Minuit2_MinimumState(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlROOT_Minuit2_LASymMatrix(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlROOT_Minuit2_MnUserParameters(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlROOT_Minuit2_MnUserCovariance(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlROOT_Minuit2_MnGlobalCorrelationCoeff(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlROOT_Minuit2_MnUserParameterState(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlROOT_Minuit2_MnMachinePrecision(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlROOT_Minuit2_MinosError(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlstd_pair(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlROOT_Minuit2_MnPrint(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlROOT_Minuit2_MnPrint_Oneline(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlROOT_Minuit2_MinimumError(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlROOT_Minuit2_FunctionGradient(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlROOT_Minuit2_MinuitParameter(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlROOT_Minuit2_MnUserTransformation(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlROOT_Minuit2_MinimumSeed(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlJuliaFcn(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlROOT_Minuit2_MnStrategy(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlXYPoint(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlROOT_Minuit2_MnContours(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlROOT_Minuit2_MnApplication(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlROOT_Minuit2_ModularFunctionMinimizer(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlROOT_Minuit2_MnMigrad(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlROOT_Minuit2_MnHesse(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlROOT_Minuit2_MnFcn(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlROOT_Minuit2_MnMinos(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlROOT_Minuit2_MnCross(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlROOT_Minuit2_MnSimplex(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlROOT_Minuit2_MnCross_CrossParLimit(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlROOT_Minuit2_MnCross_CrossFcnLimit(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlROOT_Minuit2_MnCross_CrossNewMin(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlROOT_Minuit2_MnScan(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlGlobal(jlcxx::Module&);
//method from libcxxwrap returning its version
extern "C" JLCXX_API const char* cxxwrap_version_string();

//Check the code is compiled with a compatible version of libcxxwrap:
static_assert(1000*1000*JLCXX_VERSION_MAJOR  + 1000 * JLCXX_VERSION_MINOR + JLCXX_VERSION_PATCH >= 12000
  && 1000 * 1000 * JLCXX_VERSION_MAJOR  + 1000 * JLCXX_VERSION_MINOR + JLCXX_VERSION_PATCH < 14000,
  "The code was generated with WrapIt! for "
  "a different CxxWrap version (controlled with the cxxwrap_version parameter).");

//Check the version of loaded libcxxwrap library:
void throw_if_version_incompatibility(){
  std::string version_str = cxxwrap_version_string();
  static std::regex r("([[:digit:]]{1,3})\\.([[:digit:]]{1,3})\\.([[:digit:]]{1,3})");
  std::smatch matches;
  if(!std::regex_match(version_str, matches, r)){
    std::cerr << "Warning: Failed to check libcxxwrap version.";
  } else{    long version_int =   1000*1000*strtol(matches[1].str().c_str(), 0, 10)
                       +      1000*strtol(matches[2].str().c_str(), 0, 10)
                       +           strtol(matches[3].str().c_str(), 0, 10);
    if(version_int < 12000 || version_int >= 14000){
      throw std::runtime_error(std::string("Found libcxxwrap_jll version ")
       + version_str + ", while module Minuit2 requires a version in "
      "[0.12.0, 0.14.0)."
      " Note: if the module was installed with the package manager, the Project.toml file "
      "of the package is probably missing a compat specification that would have prevented "
      "the inconsistency.");
    }
  }
}


JLCXX_MODULE define_julia_module(jlcxx::Module& jlModule){
  
throw_if_version_incompatibility();

  std::vector<std::shared_ptr<Wrapper>> wrappers = {
    std::shared_ptr<Wrapper>(newJlROOT_Minuit2_FCNBase(jlModule)),
    std::shared_ptr<Wrapper>(newJlROOT_Minuit2_LAVector(jlModule)),
    std::shared_ptr<Wrapper>(newJlROOT_Minuit2_MinimumParameters(jlModule)),
    std::shared_ptr<Wrapper>(newJlROOT_Minuit2_FunctionMinimum(jlModule)),
    std::shared_ptr<Wrapper>(newJlROOT_Minuit2_MinimumState(jlModule)),
    std::shared_ptr<Wrapper>(newJlROOT_Minuit2_LASymMatrix(jlModule)),
    std::shared_ptr<Wrapper>(newJlROOT_Minuit2_MnUserParameters(jlModule)),
    std::shared_ptr<Wrapper>(newJlROOT_Minuit2_MnUserCovariance(jlModule)),
    std::shared_ptr<Wrapper>(newJlROOT_Minuit2_MnGlobalCorrelationCoeff(jlModule)),
    std::shared_ptr<Wrapper>(newJlROOT_Minuit2_MnUserParameterState(jlModule)),
    std::shared_ptr<Wrapper>(newJlROOT_Minuit2_MnMachinePrecision(jlModule)),
    std::shared_ptr<Wrapper>(newJlROOT_Minuit2_MinosError(jlModule)),
    std::shared_ptr<Wrapper>(newJlstd_pair(jlModule)),
    std::shared_ptr<Wrapper>(newJlROOT_Minuit2_MnPrint(jlModule)),
    std::shared_ptr<Wrapper>(newJlROOT_Minuit2_MnPrint_Oneline(jlModule)),
    std::shared_ptr<Wrapper>(newJlROOT_Minuit2_MinimumError(jlModule)),
    std::shared_ptr<Wrapper>(newJlROOT_Minuit2_FunctionGradient(jlModule)),
    std::shared_ptr<Wrapper>(newJlROOT_Minuit2_MinuitParameter(jlModule)),
    std::shared_ptr<Wrapper>(newJlROOT_Minuit2_MnUserTransformation(jlModule)),
    std::shared_ptr<Wrapper>(newJlROOT_Minuit2_MinimumSeed(jlModule)),
    std::shared_ptr<Wrapper>(newJlJuliaFcn(jlModule)),
    std::shared_ptr<Wrapper>(newJlROOT_Minuit2_MnStrategy(jlModule)),
    std::shared_ptr<Wrapper>(newJlXYPoint(jlModule)),
    std::shared_ptr<Wrapper>(newJlROOT_Minuit2_MnContours(jlModule)),
    std::shared_ptr<Wrapper>(newJlROOT_Minuit2_MnApplication(jlModule)),
    std::shared_ptr<Wrapper>(newJlROOT_Minuit2_ModularFunctionMinimizer(jlModule)),
    std::shared_ptr<Wrapper>(newJlROOT_Minuit2_MnMigrad(jlModule)),
    std::shared_ptr<Wrapper>(newJlROOT_Minuit2_MnHesse(jlModule)),
    std::shared_ptr<Wrapper>(newJlROOT_Minuit2_MnFcn(jlModule)),
    std::shared_ptr<Wrapper>(newJlROOT_Minuit2_MnMinos(jlModule)),
    std::shared_ptr<Wrapper>(newJlROOT_Minuit2_MnCross(jlModule)),
    std::shared_ptr<Wrapper>(newJlROOT_Minuit2_MnSimplex(jlModule)),
    std::shared_ptr<Wrapper>(newJlROOT_Minuit2_MnCross_CrossParLimit(jlModule)),
    std::shared_ptr<Wrapper>(newJlROOT_Minuit2_MnCross_CrossFcnLimit(jlModule)),
    std::shared_ptr<Wrapper>(newJlROOT_Minuit2_MnCross_CrossNewMin(jlModule)),
    std::shared_ptr<Wrapper>(newJlROOT_Minuit2_MnScan(jlModule)),
    std::shared_ptr<Wrapper>(newJlGlobal(jlModule))
  };

  DEBUG_MSG("Adding wrapper for enum ROOT::Minuit2::GradientParameterSpace (" __HERE__ ")");
  // defined in /Users/mato/.julia/artifacts/4afa81fd17c8d2616a0895f609579f19a4e4e4b7/include/Minuit2/Minuit2/FCNBase.h:35:12
  jlModule.add_bits<ROOT::Minuit2::GradientParameterSpace>("ROOT!Minuit2!GradientParameterSpace", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("ROOT!Minuit2!GradientParameterSpace!External", ROOT::Minuit2::GradientParameterSpace::External);
  jlModule.set_const("ROOT!Minuit2!GradientParameterSpace!Internal", ROOT::Minuit2::GradientParameterSpace::Internal);

  DEBUG_MSG("Adding wrapper for enum ROOT::Minuit2::MnPrint::Verbosity (" __HERE__ ")");
  // defined in /Users/mato/.julia/artifacts/4afa81fd17c8d2616a0895f609579f19a4e4e4b7/include/Minuit2/Minuit2/MnPrint.h:76:15
  jlModule.add_bits<ROOT::Minuit2::MnPrint::Verbosity>("ROOT!Minuit2!MnPrint!Verbosity", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("ROOT!Minuit2!MnPrint!Verbosity!Error", ROOT::Minuit2::MnPrint::Verbosity::Error);
  jlModule.set_const("ROOT!Minuit2!MnPrint!Verbosity!Warn", ROOT::Minuit2::MnPrint::Verbosity::Warn);
  jlModule.set_const("ROOT!Minuit2!MnPrint!Verbosity!Info", ROOT::Minuit2::MnPrint::Verbosity::Info);
  jlModule.set_const("ROOT!Minuit2!MnPrint!Verbosity!Debug", ROOT::Minuit2::MnPrint::Verbosity::Debug);
  jlModule.set_const("ROOT!Minuit2!MnPrint!Verbosity!Trace", ROOT::Minuit2::MnPrint::Verbosity::Trace);

  DEBUG_MSG("Adding wrapper for enum ROOT::Minuit2::FunctionMinimum::Status (" __HERE__ ")");
  // defined in /Users/mato/.julia/artifacts/4afa81fd17c8d2616a0895f609579f19a4e4e4b7/include/Minuit2/Minuit2/FunctionMinimum.h:40:9
  jlModule.add_bits<ROOT::Minuit2::FunctionMinimum::Status>("ROOT!Minuit2!FunctionMinimum!Status", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("ROOT!Minuit2!FunctionMinimum!MnValid", ROOT::Minuit2::FunctionMinimum::MnValid);
  jlModule.set_const("ROOT!Minuit2!FunctionMinimum!MnReachedCallLimit", ROOT::Minuit2::FunctionMinimum::MnReachedCallLimit);
  jlModule.set_const("ROOT!Minuit2!FunctionMinimum!MnAboveMaxEdm", ROOT::Minuit2::FunctionMinimum::MnAboveMaxEdm);
  for(const auto& w: wrappers) w->add_methods();

}
