// this file was auto-generated by wrapit v1.4.0-3-g14eb9a6
#include "Wrapper.h"

#include "jlMinuit2.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<ROOT::Minuit2::MnCross::CrossFcnLimit> : std::false_type { };
  template<> struct DefaultConstructible<ROOT::Minuit2::MnCross::CrossFcnLimit> : std::false_type { };
}

// Class generating the wrapper for type ROOT::Minuit2::MnCross::CrossFcnLimit
// signature to use in the veto file: ROOT::Minuit2::MnCross::CrossFcnLimit
struct JlROOT_Minuit2_MnCross_CrossFcnLimit: public Wrapper {

  JlROOT_Minuit2_MnCross_CrossFcnLimit(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type ROOT::Minuit2::MnCross::CrossFcnLimit (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/4afa81fd17c8d2616a0895f609579f19a4e4e4b7/include/Minuit2/Minuit2/MnCross.h:24:10
    jlcxx::TypeWrapper<ROOT::Minuit2::MnCross::CrossFcnLimit>  t = jlModule.add_type<ROOT::Minuit2::MnCross::CrossFcnLimit>("ROOT!Minuit2!MnCross!CrossFcnLimit");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<ROOT::Minuit2::MnCross::CrossFcnLimit>>(new jlcxx::TypeWrapper<ROOT::Minuit2::MnCross::CrossFcnLimit>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<ROOT::Minuit2::MnCross::CrossFcnLimit>> type_;
};
std::shared_ptr<Wrapper> newJlROOT_Minuit2_MnCross_CrossFcnLimit(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlROOT_Minuit2_MnCross_CrossFcnLimit(module));
}
