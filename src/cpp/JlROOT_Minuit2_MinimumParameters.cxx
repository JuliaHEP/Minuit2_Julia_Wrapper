// this file was auto-generated by wrapit v1.6.0
#include "Wrapper.h"

#include "jlMinuit2.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<ROOT::Minuit2::MinimumParameters> : std::false_type { };
  template<> struct DefaultConstructible<ROOT::Minuit2::MinimumParameters> : std::false_type { };
}

// Class generating the wrapper for type ROOT::Minuit2::MinimumParameters
// signature to use in the veto file: ROOT::Minuit2::MinimumParameters
struct JlROOT_Minuit2_MinimumParameters: public Wrapper {

  JlROOT_Minuit2_MinimumParameters(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type ROOT::Minuit2::MinimumParameters (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/4afa81fd17c8d2616a0895f609579f19a4e4e4b7/include/Minuit2/Minuit2/MinimumParameters.h:19:7
    jlcxx::TypeWrapper<ROOT::Minuit2::MinimumParameters>  t = jlModule.add_type<ROOT::Minuit2::MinimumParameters>("ROOT!Minuit2!MinimumParameters");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<ROOT::Minuit2::MinimumParameters>>(new jlcxx::TypeWrapper<ROOT::Minuit2::MinimumParameters>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void ROOT::Minuit2::MinimumParameters::MinimumParameters(unsigned int, double) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/4afa81fd17c8d2616a0895f609579f19a4e4e4b7/include/Minuit2/Minuit2/MinimumParameters.h:22:4
    t.constructor<unsigned int>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("n")    );
    t.constructor<unsigned int, double>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("n"), jlcxx::arg("fval")    );


    DEBUG_MSG("Adding wrapper for void ROOT::Minuit2::MinimumParameters::MinimumParameters(const ROOT::Minuit2::MnAlgebraicVector &, double) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/4afa81fd17c8d2616a0895f609579f19a4e4e4b7/include/Minuit2/Minuit2/MinimumParameters.h:28:4
    t.constructor<const ROOT::Minuit2::MnAlgebraicVector &, double>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("avec"), jlcxx::arg("fval")    );


    DEBUG_MSG("Adding wrapper for void ROOT::Minuit2::MinimumParameters::MinimumParameters(const ROOT::Minuit2::MnAlgebraicVector &, const ROOT::Minuit2::MnAlgebraicVector &, double) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/4afa81fd17c8d2616a0895f609579f19a4e4e4b7/include/Minuit2/Minuit2/MinimumParameters.h:34:4
    t.constructor<const ROOT::Minuit2::MnAlgebraicVector &, const ROOT::Minuit2::MnAlgebraicVector &, double>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("avec"), jlcxx::arg("dirin"), jlcxx::arg("fval")    );

    DEBUG_MSG("Adding wrapper for const ROOT::Minuit2::MnAlgebraicVector & ROOT::Minuit2::MinimumParameters::Vec() (" __HERE__ ")");
    // signature to use in the veto list: const ROOT::Minuit2::MnAlgebraicVector & ROOT::Minuit2::MinimumParameters::Vec()
    // defined in /Users/mato/.julia/artifacts/4afa81fd17c8d2616a0895f609579f19a4e4e4b7/include/Minuit2/Minuit2/MinimumParameters.h:39:29
    t.method("Vec", [](ROOT::Minuit2::MinimumParameters const& a)->const ROOT::Minuit2::MnAlgebraicVector & { return a.Vec(); }, jlcxx::arg("this"));
    t.method("Vec", [](ROOT::Minuit2::MinimumParameters const* a)->const ROOT::Minuit2::MnAlgebraicVector & { return a->Vec(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for const ROOT::Minuit2::MnAlgebraicVector & ROOT::Minuit2::MinimumParameters::Dirin() (" __HERE__ ")");
    // signature to use in the veto list: const ROOT::Minuit2::MnAlgebraicVector & ROOT::Minuit2::MinimumParameters::Dirin()
    // defined in /Users/mato/.julia/artifacts/4afa81fd17c8d2616a0895f609579f19a4e4e4b7/include/Minuit2/Minuit2/MinimumParameters.h:40:29
    t.method("Dirin", [](ROOT::Minuit2::MinimumParameters const& a)->const ROOT::Minuit2::MnAlgebraicVector & { return a.Dirin(); }, jlcxx::arg("this"));
    t.method("Dirin", [](ROOT::Minuit2::MinimumParameters const* a)->const ROOT::Minuit2::MnAlgebraicVector & { return a->Dirin(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for double ROOT::Minuit2::MinimumParameters::Fval() (" __HERE__ ")");
    // signature to use in the veto list: double ROOT::Minuit2::MinimumParameters::Fval()
    // defined in /Users/mato/.julia/artifacts/4afa81fd17c8d2616a0895f609579f19a4e4e4b7/include/Minuit2/Minuit2/MinimumParameters.h:41:11
    t.method("Fval", [](ROOT::Minuit2::MinimumParameters const& a)->double { return a.Fval(); }, jlcxx::arg("this"));
    t.method("Fval", [](ROOT::Minuit2::MinimumParameters const* a)->double { return a->Fval(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for bool ROOT::Minuit2::MinimumParameters::IsValid() (" __HERE__ ")");
    // signature to use in the veto list: bool ROOT::Minuit2::MinimumParameters::IsValid()
    // defined in /Users/mato/.julia/artifacts/4afa81fd17c8d2616a0895f609579f19a4e4e4b7/include/Minuit2/Minuit2/MinimumParameters.h:42:9
    t.method("IsValid", [](ROOT::Minuit2::MinimumParameters const& a)->bool { return a.IsValid(); }, jlcxx::arg("this"));
    t.method("IsValid", [](ROOT::Minuit2::MinimumParameters const* a)->bool { return a->IsValid(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for bool ROOT::Minuit2::MinimumParameters::HasStepSize() (" __HERE__ ")");
    // signature to use in the veto list: bool ROOT::Minuit2::MinimumParameters::HasStepSize()
    // defined in /Users/mato/.julia/artifacts/4afa81fd17c8d2616a0895f609579f19a4e4e4b7/include/Minuit2/Minuit2/MinimumParameters.h:43:9
    t.method("HasStepSize", [](ROOT::Minuit2::MinimumParameters const& a)->bool { return a.HasStepSize(); }, jlcxx::arg("this"));
    t.method("HasStepSize", [](ROOT::Minuit2::MinimumParameters const* a)->bool { return a->HasStepSize(); }, jlcxx::arg("this"));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<ROOT::Minuit2::MinimumParameters>> type_;
};
std::shared_ptr<Wrapper> newJlROOT_Minuit2_MinimumParameters(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlROOT_Minuit2_MinimumParameters(module));
}
