// this file was auto-generated by wrapit v1.4.0-3-g14eb9a6
#include "Wrapper.h"

#include "jlMinuit2.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<ROOT::Minuit2::MinimumSeed> : std::false_type { };
  template<> struct DefaultConstructible<ROOT::Minuit2::MinimumSeed> : std::false_type { };
}

// Class generating the wrapper for type ROOT::Minuit2::MinimumSeed
// signature to use in the veto file: ROOT::Minuit2::MinimumSeed
struct JlROOT_Minuit2_MinimumSeed: public Wrapper {

  JlROOT_Minuit2_MinimumSeed(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type ROOT::Minuit2::MinimumSeed (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/4afa81fd17c8d2616a0895f609579f19a4e4e4b7/include/Minuit2/Minuit2/MinimumSeed.h:23:7
    jlcxx::TypeWrapper<ROOT::Minuit2::MinimumSeed>  t = jlModule.add_type<ROOT::Minuit2::MinimumSeed>("ROOT!Minuit2!MinimumSeed");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<ROOT::Minuit2::MinimumSeed>>(new jlcxx::TypeWrapper<ROOT::Minuit2::MinimumSeed>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<ROOT::Minuit2::MinimumSeed>> type_;
};
std::shared_ptr<Wrapper> newJlROOT_Minuit2_MinimumSeed(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlROOT_Minuit2_MinimumSeed(module));
}
