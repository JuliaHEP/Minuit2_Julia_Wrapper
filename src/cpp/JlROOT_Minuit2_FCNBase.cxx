// this file was auto-generated by wrapit v1.4.0-3-g14eb9a6
#include "Wrapper.h"

#include "jlMinuit2.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<ROOT::Minuit2::FCNBase> : std::false_type { };
  template<> struct DefaultConstructible<ROOT::Minuit2::FCNBase> : std::false_type { };
}

// Class generating the wrapper for type ROOT::Minuit2::FCNBase
// signature to use in the veto file: ROOT::Minuit2::FCNBase
struct JlROOT_Minuit2_FCNBase: public Wrapper {

  JlROOT_Minuit2_FCNBase(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type ROOT::Minuit2::FCNBase (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/4afa81fd17c8d2616a0895f609579f19a4e4e4b7/include/Minuit2/Minuit2/FCNBase.h:51:7
    jlcxx::TypeWrapper<ROOT::Minuit2::FCNBase>  t = jlModule.add_type<ROOT::Minuit2::FCNBase>("ROOT!Minuit2!FCNBase");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<ROOT::Minuit2::FCNBase>>(new jlcxx::TypeWrapper<ROOT::Minuit2::FCNBase>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;

    DEBUG_MSG("Adding wrapper for double ROOT::Minuit2::FCNBase::operator()(const std::vector<double> &) (" __HERE__ ")");
    // signature to use in the veto list: double ROOT::Minuit2::FCNBase::operator()(const std::vector<double> &)
    // defined in /Users/mato/.julia/artifacts/4afa81fd17c8d2616a0895f609579f19a4e4e4b7/include/Minuit2/Minuit2/FCNBase.h:77:11
    t.method("paren", [](ROOT::Minuit2::FCNBase const& a, const std::vector<double> & arg0)->double { return a.operator()(arg0); });
    t.method("paren", [](ROOT::Minuit2::FCNBase const* a, const std::vector<double> & arg0)->double { return a->operator()(arg0); });

    DEBUG_MSG("Adding wrapper for double ROOT::Minuit2::FCNBase::ErrorDef() (" __HERE__ ")");
    // signature to use in the veto list: double ROOT::Minuit2::FCNBase::ErrorDef()
    // defined in /Users/mato/.julia/artifacts/4afa81fd17c8d2616a0895f609579f19a4e4e4b7/include/Minuit2/Minuit2/FCNBase.h:91:19
    t.method("ErrorDef", [](ROOT::Minuit2::FCNBase const& a)->double { return a.ErrorDef(); });
    t.method("ErrorDef", [](ROOT::Minuit2::FCNBase const* a)->double { return a->ErrorDef(); });

    DEBUG_MSG("Adding wrapper for double ROOT::Minuit2::FCNBase::Up() (" __HERE__ ")");
    // signature to use in the veto list: double ROOT::Minuit2::FCNBase::Up()
    // defined in /Users/mato/.julia/artifacts/4afa81fd17c8d2616a0895f609579f19a4e4e4b7/include/Minuit2/Minuit2/FCNBase.h:105:19
    t.method("Up", [](ROOT::Minuit2::FCNBase const& a)->double { return a.Up(); });
    t.method("Up", [](ROOT::Minuit2::FCNBase const* a)->double { return a->Up(); });

    DEBUG_MSG("Adding wrapper for void ROOT::Minuit2::FCNBase::SetErrorDef(double) (" __HERE__ ")");
    // signature to use in the veto list: void ROOT::Minuit2::FCNBase::SetErrorDef(double)
    // defined in /Users/mato/.julia/artifacts/4afa81fd17c8d2616a0895f609579f19a4e4e4b7/include/Minuit2/Minuit2/FCNBase.h:111:17
    t.method("SetErrorDef", [](ROOT::Minuit2::FCNBase& a, double arg0)->void { a.SetErrorDef(arg0); });
    t.method("SetErrorDef", [](ROOT::Minuit2::FCNBase* a, double arg0)->void { a->SetErrorDef(arg0); });

    DEBUG_MSG("Adding wrapper for bool ROOT::Minuit2::FCNBase::HasGradient() (" __HERE__ ")");
    // signature to use in the veto list: bool ROOT::Minuit2::FCNBase::HasGradient()
    // defined in /Users/mato/.julia/artifacts/4afa81fd17c8d2616a0895f609579f19a4e4e4b7/include/Minuit2/Minuit2/FCNBase.h:113:17
    t.method("HasGradient", [](ROOT::Minuit2::FCNBase const& a)->bool { return a.HasGradient(); });
    t.method("HasGradient", [](ROOT::Minuit2::FCNBase const* a)->bool { return a->HasGradient(); });

    DEBUG_MSG("Adding wrapper for std::vector<double> ROOT::Minuit2::FCNBase::Gradient(const std::vector<double> &) (" __HERE__ ")");
    // signature to use in the veto list: std::vector<double> ROOT::Minuit2::FCNBase::Gradient(const std::vector<double> &)
    // defined in /Users/mato/.julia/artifacts/4afa81fd17c8d2616a0895f609579f19a4e4e4b7/include/Minuit2/Minuit2/FCNBase.h:115:32
    t.method("Gradient", [](ROOT::Minuit2::FCNBase const& a, const std::vector<double> & arg0)->std::vector<double> { return a.Gradient(arg0); });
    t.method("Gradient", [](ROOT::Minuit2::FCNBase const* a, const std::vector<double> & arg0)->std::vector<double> { return a->Gradient(arg0); });

    DEBUG_MSG("Adding wrapper for std::vector<double> ROOT::Minuit2::FCNBase::GradientWithPrevResult(const std::vector<double> &, double *, double *, double *) (" __HERE__ ")");
    // signature to use in the veto list: std::vector<double> ROOT::Minuit2::FCNBase::GradientWithPrevResult(const std::vector<double> &, double *, double *, double *)
    // defined in /Users/mato/.julia/artifacts/4afa81fd17c8d2616a0895f609579f19a4e4e4b7/include/Minuit2/Minuit2/FCNBase.h:116:32
    t.method("GradientWithPrevResult", [](ROOT::Minuit2::FCNBase const& a, const std::vector<double> & arg0, double * arg1, double * arg2, double * arg3)->std::vector<double> { return a.GradientWithPrevResult(arg0, arg1, arg2, arg3); });
    t.method("GradientWithPrevResult", [](ROOT::Minuit2::FCNBase const* a, const std::vector<double> & arg0, double * arg1, double * arg2, double * arg3)->std::vector<double> { return a->GradientWithPrevResult(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for ROOT::Minuit2::GradientParameterSpace ROOT::Minuit2::FCNBase::gradParameterSpace() (" __HERE__ ")");
    // signature to use in the veto list: ROOT::Minuit2::GradientParameterSpace ROOT::Minuit2::FCNBase::gradParameterSpace()
    // defined in /Users/mato/.julia/artifacts/4afa81fd17c8d2616a0895f609579f19a4e4e4b7/include/Minuit2/Minuit2/FCNBase.h:122:35
    t.method("gradParameterSpace", [](ROOT::Minuit2::FCNBase const& a)->ROOT::Minuit2::GradientParameterSpace { return a.gradParameterSpace(); });
    t.method("gradParameterSpace", [](ROOT::Minuit2::FCNBase const* a)->ROOT::Minuit2::GradientParameterSpace { return a->gradParameterSpace(); });

    DEBUG_MSG("Adding wrapper for std::vector<double> ROOT::Minuit2::FCNBase::G2(const std::vector<double> &) (" __HERE__ ")");
    // signature to use in the veto list: std::vector<double> ROOT::Minuit2::FCNBase::G2(const std::vector<double> &)
    // defined in /Users/mato/.julia/artifacts/4afa81fd17c8d2616a0895f609579f19a4e4e4b7/include/Minuit2/Minuit2/FCNBase.h:127:32
    t.method("G2", [](ROOT::Minuit2::FCNBase const& a, const std::vector<double> & arg0)->std::vector<double> { return a.G2(arg0); });
    t.method("G2", [](ROOT::Minuit2::FCNBase const* a, const std::vector<double> & arg0)->std::vector<double> { return a->G2(arg0); });

    DEBUG_MSG("Adding wrapper for std::vector<double> ROOT::Minuit2::FCNBase::Hessian(const std::vector<double> &) (" __HERE__ ")");
    // signature to use in the veto list: std::vector<double> ROOT::Minuit2::FCNBase::Hessian(const std::vector<double> &)
    // defined in /Users/mato/.julia/artifacts/4afa81fd17c8d2616a0895f609579f19a4e4e4b7/include/Minuit2/Minuit2/FCNBase.h:130:32
    t.method("Hessian", [](ROOT::Minuit2::FCNBase const& a, const std::vector<double> & arg0)->std::vector<double> { return a.Hessian(arg0); });
    t.method("Hessian", [](ROOT::Minuit2::FCNBase const* a, const std::vector<double> & arg0)->std::vector<double> { return a->Hessian(arg0); });

    DEBUG_MSG("Adding wrapper for bool ROOT::Minuit2::FCNBase::HasHessian() (" __HERE__ ")");
    // signature to use in the veto list: bool ROOT::Minuit2::FCNBase::HasHessian()
    // defined in /Users/mato/.julia/artifacts/4afa81fd17c8d2616a0895f609579f19a4e4e4b7/include/Minuit2/Minuit2/FCNBase.h:132:17
    t.method("HasHessian", [](ROOT::Minuit2::FCNBase const& a)->bool { return a.HasHessian(); });
    t.method("HasHessian", [](ROOT::Minuit2::FCNBase const* a)->bool { return a->HasHessian(); });

    DEBUG_MSG("Adding wrapper for bool ROOT::Minuit2::FCNBase::HasG2() (" __HERE__ ")");
    // signature to use in the veto list: bool ROOT::Minuit2::FCNBase::HasG2()
    // defined in /Users/mato/.julia/artifacts/4afa81fd17c8d2616a0895f609579f19a4e4e4b7/include/Minuit2/Minuit2/FCNBase.h:134:17
    t.method("HasG2", [](ROOT::Minuit2::FCNBase const& a)->bool { return a.HasG2(); });
    t.method("HasG2", [](ROOT::Minuit2::FCNBase const* a)->bool { return a->HasG2(); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<ROOT::Minuit2::FCNBase>> type_;
};
std::shared_ptr<Wrapper> newJlROOT_Minuit2_FCNBase(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlROOT_Minuit2_FCNBase(module));
}
